import os
import re
from yt_dlp import YoutubeDL

def get_default_music_dir():
    """Devuelve la ruta del directorio de M√∫sica predeterminado del sistema."""
    home_dir = os.path.expanduser("~")
    return os.path.join(home_dir, "Music")

def sanitize_filename(filename):
    """Limpia el nombre del archivo eliminando caracteres no v√°lidos."""
    # Elimina caracteres que no son v√°lidos en nombres dS
    # e archivo
    filename = re.sub(r'[<>:"/\\|?*]', '', filename)
    # Elimina espacios al inicio y final
    filename = filename.strip()
    # Reemplaza m√∫ltiples espacios con uno solo
    filename = re.sub(r'\s+', ' ', filename)
    return filename

def extract_artist_from_title(title):
    """Extrae el nombre del artista del t√≠tulo del video."""
    # Patrones comunes para separar artista y t√≠tulo
    patterns = [
        r'^([^-]+)\s*-\s*(.+)$',  # "Artista - Canci√≥n"
        r'^([^‚Äì]+)\s*‚Äì\s*(.+)$',  # "Artista ‚Äì Canci√≥n" (gui√≥n largo)
        r'^([^|]+)\s*\|\s*(.+)$', # "Artista | Canci√≥n"
        r'^([^‚Ä¢]+)\s*‚Ä¢\s*(.+)$',  # "Artista ‚Ä¢ Canci√≥n"
    ]
    
    for pattern in patterns:
        match = re.match(pattern, title)
        if match:
            artist = match.group(1).strip()
            song = match.group(2).strip()
            return sanitize_filename(artist), sanitize_filename(song)
    
    # Si no encuentra un patr√≥n, devuelve "Artista Desconocido"
    return "Artista Desconocido", sanitize_filename(title)

def download_mp3(url, organize_by_artist=True):
    """
    Descarga audio de un video o playlist de YouTube como MP3.
    Si organize_by_artist es True, organiza las canciones en carpetas por artista.
    """
    music_dir = get_default_music_dir()
    
    # Primero, obtenemos la informaci√≥n del video/playlist sin descargarlo
    ydl_info_opts = {
        'quiet': True,
        'no_warnings': True,
    }
    
    try:
        with YoutubeDL(ydl_info_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            # Verificar si es una playlist
            if 'entries' in info:
                print(f"üéµ Playlist detectada: {info.get('title', 'Sin t√≠tulo')}")
                print(f"üìä N√∫mero de canciones: {len(info['entries'])}")
                
                confirm = input("¬øContinuar con la descarga de toda la playlist? (s/n): ").lower().strip()
                if confirm not in ['s', 'si', 's√≠', 'y', 'yes']:
                    print("Descarga cancelada.")
                    return
                
                # Descargar playlist completa
                download_playlist(url, organize_by_artist)
                return
            else:
                # Es un video individual
                video_title = info.get('title', 'T√≠tulo Desconocido')
                uploader = info.get('uploader', 'Canal Desconocido')
    except Exception as e:
        print(f"Error al obtener informaci√≥n del video: {e}")
        return
    
    if organize_by_artist:
        # Intentamos extraer el artista del t√≠tulo
        artist, song_title = extract_artist_from_title(video_title)
        
        # Si no pudimos extraer el artista del t√≠tulo, usamos el nombre del canal
        if artist == "Artista Desconocido":
            artist = sanitize_filename(uploader)
        
        # Crear carpeta del artista
        artist_dir = os.path.join(music_dir, artist)
        output_template = os.path.join(artist_dir, f"{song_title}.mp3")
    else:
        # Descarga directamente en la carpeta de m√∫sica
        output_template = os.path.join(music_dir, f"{sanitize_filename(video_title)}.mp3")
    
    # Crear el directorio si no existe
    output_dir = os.path.dirname(output_template)
    try:
        os.makedirs(output_dir, exist_ok=True)
    except PermissionError:
        print(f"Error: Sin permisos para crear/escribir en '{output_dir}'.")
        return
    except Exception as e:
        print(f"Error inesperado: {e}")
        return
    
    # Configuraci√≥n de yt-dlp
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': output_template,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
        'no_warnings': True,
    }
    
    # Mostrar informaci√≥n de la descarga
    if organize_by_artist:
        print(f"Descargando: {song_title}")
        print(f"Artista detectado: {artist}")
        print(f"Guardando en: {artist_dir}")
    else:
        print(f"Descargando: {video_title}")
        print(f"Guardando en: {music_dir}")
    
    try:
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        print("¬°Descarga completada exitosamente!")
    except Exception as e:
        print(f"Error en la descarga: {e}")

def download_playlist(url, organize_by_artist=True):
    """Descarga una playlist completa de YouTube."""
    music_dir = get_default_music_dir()
    
    if organize_by_artist:
        # Para playlists, usamos un template din√°mico que se resuelve por cada video
        output_template = os.path.join(music_dir, "%(uploader)s", "%(title)s.%(ext)s")
    else:
        output_template = os.path.join(music_dir, "%(title)s.%(ext)s")
    
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': output_template.replace("%(ext)s", "mp3"),
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': False,  # Mostrar progreso para playlists
        'no_warnings': True,
        'extract_flat': False,  # Extraer informaci√≥n completa de cada video
    }
    
    try:
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        print("üéâ ¬°Playlist descargada completamente!")
    except Exception as e:
        print(f"‚ùå Error en la descarga de playlist: {e}")

def reorganize_existing_music():
    """Reorganiza canciones ya descargadas en carpetas por artista."""
    music_dir = get_default_music_dir()
    
    if not os.path.exists(music_dir):
        print(f"‚ùå No se encontr√≥ el directorio de m√∫sica: {music_dir}")
        return
    
    # Buscar archivos MP3 en el directorio ra√≠z de m√∫sica
    mp3_files = []
    for file in os.listdir(music_dir):
        if file.lower().endswith('.mp3') and os.path.isfile(os.path.join(music_dir, file)):
            mp3_files.append(file)
    
    if not mp3_files:
        print("üìÅ No se encontraron archivos MP3 para reorganizar en el directorio ra√≠z.")
        return
    
    print(f"üéµ Encontrados {len(mp3_files)} archivos MP3 para reorganizar:")
    for i, file in enumerate(mp3_files[:5], 1):  # Mostrar solo los primeros 5
        print(f"  {i}. {file}")
    if len(mp3_files) > 5:
        print(f"  ... y {len(mp3_files) - 5} m√°s")
    
    confirm = input("\n¬øProceder con la reorganizaci√≥n? (s/n): ").lower().strip()
    if confirm not in ['s', 'si', 's√≠', 'y', 'yes']:
        print("Reorganizaci√≥n cancelada.")
        return
    
    moved_count = 0
    error_count = 0
    
    for filename in mp3_files:
        try:
            # Remover la extensi√≥n .mp3 para analizar el t√≠tulo
            title = filename[:-4]  # Quitar '.mp3'
            
            # Extraer artista del nombre del archivo
            artist, song_title = extract_artist_from_title(title)
            
            # Crear carpeta del artista
            artist_dir = os.path.join(music_dir, artist)
            os.makedirs(artist_dir, exist_ok=True)
            
            # Rutas de origen y destino
            old_path = os.path.join(music_dir, filename)
            new_filename = f"{song_title}.mp3"
            new_path = os.path.join(artist_dir, new_filename)
            
            # Verificar si ya existe un archivo con el mismo nombre
            if os.path.exists(new_path):
                print(f"‚ö†Ô∏è  Ya existe: {artist}/{new_filename}")
                continue
            
            # Mover el archivo
            os.rename(old_path, new_path)
            print(f"‚úÖ Movido: {filename} ‚Üí {artist}/{new_filename}")
            moved_count += 1
            
        except Exception as e:
            print(f"‚ùå Error con {filename}: {e}")
            error_count += 1
    
    print(f"\nüéâ Reorganizaci√≥n completada:")
    print(f"   ‚úÖ Archivos movidos: {moved_count}")
    if error_count > 0:
        print(f"   ‚ùå Errores: {error_count}")

def show_menu():
    """Muestra el men√∫ principal."""
    print("\n" + "="*50)
    print("üéµ DESCARGADOR DE YOUTUBE A MP3")
    print("="*50)
    print("1. Descargar video individual")
    print("2. Descargar playlist completa")
    print("3. Reorganizar m√∫sica existente")
    print("4. Salir")
    print("="*50)

def download_multiple_songs():
    """Permite descargar m√∫ltiples canciones en una sesi√≥n con men√∫ mejorado."""
    
    # Preguntar si quiere organizar por artista (solo una vez)
    while True:
        organize = input("¬øOrganizar canciones por artista en carpetas? (s/n): ").lower().strip()
        if organize in ['s', 'si', 's√≠', 'y', 'yes']:
            organize_by_artist = True
            break
        elif organize in ['n', 'no']:
            organize_by_artist = False
            break
        else:
            print("Por favor, responde 's' para s√≠ o 'n' para no.")
    
    while True:
        show_menu()
        choice = input("Selecciona una opci√≥n (1-4): ").strip()
        
        if choice == '1':
            # Descargar video individual
            url = input("\nüìπ Ingresa la URL del video de YouTube: ").strip()
            if url and ('youtube.com' in url or 'youtu.be' in url):
                print("üöÄ Iniciando descarga...")
                download_mp3(url, organize_by_artist)
            else:
                print("‚ùå URL no v√°lida.")
        
        elif choice == '2':
            # Descargar playlist
            url = input("\nüìã Ingresa la URL de la playlist de YouTube: ").strip()
            if url and 'youtube.com' in url and ('playlist' in url or 'list=' in url):
                print("üöÄ Analizando playlist...")
                download_mp3(url, organize_by_artist)  # Ya maneja playlists internamente
            else:
                print("‚ùå URL de playlist no v√°lida.")
        
        elif choice == '3':
            # Reorganizar m√∫sica existente
            print("\nüìÅ Reorganizando m√∫sica existente...")
            reorganize_existing_music()
        
        elif choice == '4':
            print("\nüëã ¬°Hasta luego!")
            break
        
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, selecciona 1-4.")
        
        input("\nPresiona Enter para continuar...")

if __name__ == "__main__":
    download_multiple_songs()